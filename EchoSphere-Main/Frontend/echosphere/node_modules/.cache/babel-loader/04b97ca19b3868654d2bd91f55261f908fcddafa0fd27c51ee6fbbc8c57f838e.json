{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\Dashboard\\\\Components\\\\TextToSpeech.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSpeech = ({\n  content\n}) => {\n  _s();\n  const [isReading, setIsReading] = useState(false);\n  const handleReadClick = () => {\n    // Implement text-to-speech logic here to read the \"content\" prop\n    // You can use a text-to-speech library or API for this purpose\n    // Toggle \"isReading\" state accordingly\n    setIsReading(!isReading);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReadClick,\n      children: isReading ? 'Stop Reading' : 'Read Text'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"gv8HBbHHJmWiOqOOw59BNVcGB3o=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextToSpeech","content","_s","isReading","setIsReading","handleReadClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/Dashboard/Components/TextToSpeech.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TextToSpeech = ({ content }) => {\r\n  const [isReading, setIsReading] = useState(false);\r\n\r\n  const handleReadClick = () => {\r\n    // Implement text-to-speech logic here to read the \"content\" prop\r\n    // You can use a text-to-speech library or API for this purpose\r\n    // Toggle \"isReading\" state accordingly\r\n    setIsReading(!isReading);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleReadClick}>\r\n        {isReading ? 'Stop Reading' : 'Read Text'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACA;IACAD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEJ,OAAA;IAAAO,QAAA,eACEP,OAAA;MAAQQ,OAAO,EAAEF,eAAgB;MAAAC,QAAA,EAC9BH,SAAS,GAAG,cAAc,GAAG;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACT,EAAA,CAjBIF,YAAY;AAAAY,EAAA,GAAZZ,YAAY;AAmBlB,eAAeA,YAAY;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}