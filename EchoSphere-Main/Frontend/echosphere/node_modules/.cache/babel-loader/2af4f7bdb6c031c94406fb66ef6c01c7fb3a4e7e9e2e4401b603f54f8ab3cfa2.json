{"ast":null,"code":"import fetch from 'node-fetch';\nimport createHttpError from 'http-errors';\nimport { extractTooManyRequestsInfo } from './helpers.js';\nconst defaults = {\n  from: 'auto',\n  to: 'en',\n  host: 'translate.google.com'\n};\nexport async function translate(inputText, options) {\n  return new Translator(inputText, options).translate();\n}\nexport class Translator {\n  constructor(inputText, options) {\n    this.inputText = inputText;\n    this.options = Object.assign({}, defaults, options);\n  }\n  async translate() {\n    const url = this.buildUrl();\n    const fetchOptions = this.buildFetchOptions();\n    const res = await fetch(url, fetchOptions);\n    if (!res.ok) throw await this.buildError(res);\n    const raw = await res.json();\n    const text = this.buildResText(raw);\n    return {\n      text,\n      raw\n    };\n  }\n  buildUrl() {\n    const {\n      host\n    } = this.options;\n    return [`https://${host}/translate_a/single`, '?client=at', '&dt=t', '&dt=rm', '&dj=1' // result as pretty json instead of deep nested arrays\n    ].join('');\n  }\n  buildBody() {\n    const {\n      from,\n      to\n    } = this.options;\n    const params = {\n      sl: from,\n      tl: to,\n      q: this.inputText\n    };\n    return new URLSearchParams(params).toString();\n  }\n  buildFetchOptions() {\n    const {\n      fetchOptions\n    } = this.options;\n    const res = Object.assign({}, fetchOptions);\n    res.method = 'POST';\n    res.headers = Object.assign({}, res.headers, {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    });\n    res.body = this.buildBody();\n    return res;\n  }\n  buildResText({\n    sentences\n  }) {\n    return sentences.filter(s => 'trans' in s).map(s => s.trans).join('');\n  }\n  async buildError(res) {\n    if (res.status === 429) {\n      const text = await res.text();\n      const {\n        ip,\n        time,\n        url\n      } = extractTooManyRequestsInfo(text);\n      const message = `${res.statusText} IP: ${ip}, Time: ${time}, Url: ${url}`;\n      return createHttpError(res.status, message);\n    } else {\n      return createHttpError(res.status, res.statusText);\n    }\n  }\n}","map":{"version":3,"names":["fetch","createHttpError","extractTooManyRequestsInfo","defaults","from","to","host","translate","inputText","options","Translator","constructor","Object","assign","url","buildUrl","fetchOptions","buildFetchOptions","res","ok","buildError","raw","json","text","buildResText","join","buildBody","params","sl","tl","q","URLSearchParams","toString","method","headers","body","sentences","filter","s","map","trans","status","ip","time","message","statusText"],"sources":["D:\\Project\\EchoSphere-Main\\Frontend\\echosphere\\node_modules\\@vitalets\\google-translate-api\\src\\index.ts"],"sourcesContent":["import fetch, { Response } from 'node-fetch';\nimport createHttpError from 'http-errors';\nimport { RawResponse, Sentence, TranslateOptions } from './types.js';\nimport { extractTooManyRequestsInfo } from './helpers.js';\n\nconst defaults: Required<Pick<TranslateOptions, 'from' | 'to' | 'host'>> = {\n  from: 'auto',\n  to: 'en',\n  host: 'translate.google.com',\n};\n\nexport async function translate(inputText: string, options?: TranslateOptions) {\n  return new Translator(inputText, options).translate();\n}\n\nexport class Translator {\n  protected options: typeof defaults & TranslateOptions;\n\n  constructor(protected inputText: string, options?: TranslateOptions) {\n    this.options = Object.assign({}, defaults, options);\n  }\n\n  async translate() {\n    const url = this.buildUrl();\n    const fetchOptions = this.buildFetchOptions();\n    const res = await fetch(url, fetchOptions);\n    if (!res.ok) throw await this.buildError(res);\n    const raw = await res.json() as RawResponse;\n    const text = this.buildResText(raw);\n    return { text, raw };\n  }\n\n  protected buildUrl() {\n    const { host } = this.options;\n    return [\n      `https://${host}/translate_a/single`,\n      '?client=at',\n      '&dt=t',  // return sentences\n      '&dt=rm', // add translit to sentences\n      '&dj=1',  // result as pretty json instead of deep nested arrays\n    ].join('');\n  }\n\n  protected buildBody() {\n    const { from, to } = this.options;\n    const params = {\n      sl: from,\n      tl: to,\n      q: this.inputText,\n    };\n    return new URLSearchParams(params).toString();\n  }\n\n  protected buildFetchOptions() {\n    const { fetchOptions } = this.options;\n    const res = Object.assign({}, fetchOptions);\n    res.method = 'POST';\n    res.headers = Object.assign({}, res.headers, {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n    });\n    res.body = this.buildBody();\n    return res;\n  }\n\n  protected buildResText({ sentences }: RawResponse) {\n    return sentences\n      .filter((s): s is Sentence => 'trans' in s)\n      .map(s => s.trans)\n      .join('');\n  }\n\n  protected async buildError(res: Response) {\n    if (res.status === 429) {\n      const text = await res.text();\n      const { ip, time, url } = extractTooManyRequestsInfo(text);\n      const message = `${res.statusText} IP: ${ip}, Time: ${time}, Url: ${url}`;\n      return createHttpError(res.status, message);\n    } else {\n      return createHttpError(res.status, res.statusText);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}