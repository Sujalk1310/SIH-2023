{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element: Element,\n  ...rest\n}) => {\n  // Check if the user is authenticated based on user_id and worker_id.\n  const user_id = sessionStorage.getItem('user_id');\n  const worker_id = sessionStorage.getItem('worker_id');\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    element: user_id || worker_id ?\n    // If user_id is present, render the passed element (dashboard).\n    user_id ? /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this) :\n    // If worker_id is present, render the passed element (worker component).\n    worker_id ? /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }, this) : null // Handle other cases as needed\n    :\n    /*#__PURE__*/\n    // If neither user_id nor worker_id is present, navigate to login.\n    _jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Navigate","jsxDEV","_jsxDEV","PrivateRoute","element","Element","rest","user_id","sessionStorage","getItem","worker_id","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Route, Navigate } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ element: Element, ...rest }) => {\r\n  // Check if the user is authenticated based on user_id and worker_id.\r\n  const user_id = sessionStorage.getItem('user_id');\r\n  const worker_id = sessionStorage.getItem('worker_id');\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      element={\r\n        user_id || worker_id ? (\r\n          // If user_id is present, render the passed element (dashboard).\r\n          user_id ? (\r\n            <Element />\r\n          ) : (\r\n            // If worker_id is present, render the passed element (worker component).\r\n            worker_id ? (\r\n              <Element />\r\n            ) : null // Handle other cases as needed\r\n          )\r\n        ) : (\r\n          // If neither user_id nor worker_id is present, navigate to login.\r\n          <Navigate to=\"/login\" replace />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO,EAAEC,OAAO;EAAE,GAAGC;AAAK,CAAC,KAAK;EACtD;EACA,MAAMC,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EACjD,MAAMC,SAAS,GAAGF,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;EAErD,oBACEP,OAAA,CAACH,KAAK;IAAA,GACAO,IAAI;IACRF,OAAO,EACLG,OAAO,IAAIG,SAAS;IAClB;IACAH,OAAO,gBACLL,OAAA,CAACG,OAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAEX;IACAJ,SAAS,gBACPR,OAAA,CAACG,OAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GACT,IAAI,CAAC;IACV;IAAA;IAED;IACAZ,OAAA,CAACF,QAAQ;MAACe,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAElC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEN,CAAC;AAACG,EAAA,GA1BId,YAAY;AA4BlB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}