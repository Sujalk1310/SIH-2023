{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { fetchDataFromAPI } from './apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    let isMounted = true; // Track whether the component is mounted\n\n    // Fetch data from the API\n    fetchDataFromAPI(\"http://127.0.0.1:8000/api/usession\").then(apiData => {\n      // Check if the component is still mounted before updating state\n      if (isMounted) {\n        // Check if the response has message: true\n        if (apiData && apiData.message === true) {\n          setSession(apiData.message);\n        } else {\n          // Set the session to a falsy value to indicate a failed response\n          setSession(false);\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      // Set the session to a falsy value on error\n      if (isMounted) {\n        setSession(false);\n      }\n    });\n\n    // Cleanup function to handle unmounting\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Render the Dashboard component only if session is true\n  if (session === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  } else if (session === false) {\n    // Redirect to login page if session is false\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  } else {\n    // Render a loading indicator or handle errors as needed while waiting for the response\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this); // You can replace this with your loading component\n  }\n};\n_s(Dashboard, \"my2JknXsLNPscnT9b+5uRmb6O9A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","fetchDataFromAPI","jsxDEV","_jsxDEV","Dashboard","_s","session","setSession","isMounted","then","apiData","message","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { fetchDataFromAPI } from './apiService';\r\n\r\nconst Dashboard = () => {\r\n  const [session, setSession] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // Track whether the component is mounted\r\n\r\n    // Fetch data from the API\r\n    fetchDataFromAPI(\"http://127.0.0.1:8000/api/usession\")\r\n      .then(apiData => {\r\n        // Check if the component is still mounted before updating state\r\n        if (isMounted) {\r\n          // Check if the response has message: true\r\n          if (apiData && apiData.message === true) {\r\n            setSession(apiData.message);\r\n          } else {\r\n            // Set the session to a falsy value to indicate a failed response\r\n            setSession(false);\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching data:', error);\r\n        // Set the session to a falsy value on error\r\n        if (isMounted) {\r\n          setSession(false);\r\n        }\r\n      });\r\n\r\n    // Cleanup function to handle unmounting\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Render the Dashboard component only if session is true\r\n  if (session === true) {\r\n    return (\r\n      <div>\r\n        {/* Your Dashboard content here */}\r\n        <h1>Welcome to the Dashboard</h1>\r\n        {/* Add your Dashboard content */}\r\n      </div>\r\n    );\r\n  } else if (session === false) {\r\n    // Redirect to login page if session is false\r\n    return <Navigate to=\"/login\" replace />;\r\n  } else {\r\n    // Render a loading indicator or handle errors as needed while waiting for the response\r\n    return <div>Loading...</div>; // You can replace this with your loading component\r\n  }\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,gBAAgB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAIS,SAAS,GAAG,IAAI,CAAC,CAAC;;IAEtB;IACAP,gBAAgB,CAAC,oCAAoC,CAAC,CACnDQ,IAAI,CAACC,OAAO,IAAI;MACf;MACA,IAAIF,SAAS,EAAE;QACb;QACA,IAAIE,OAAO,IAAIA,OAAO,CAACC,OAAO,KAAK,IAAI,EAAE;UACvCJ,UAAU,CAACG,OAAO,CAACC,OAAO,CAAC;QAC7B,CAAC,MAAM;UACL;UACAJ,UAAU,CAAC,KAAK,CAAC;QACnB;MACF;IACF,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACA,IAAIL,SAAS,EAAE;QACbD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;;IAEJ;IACA,OAAO,MAAM;MACXC,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,OAAO,KAAK,IAAI,EAAE;IACpB,oBACEH,OAAA;MAAAY,QAAA,eAEEZ,OAAA;QAAAY,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE9B,CAAC;EAEV,CAAC,MAAM,IAAIb,OAAO,KAAK,KAAK,EAAE;IAC5B;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACoB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC,CAAC,MAAM;IACL;IACA,oBAAOhB,OAAA;MAAAY,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAChC;AACF,CAAC;AAACd,EAAA,CAlDID,SAAS;AAAAkB,EAAA,GAATlB,SAAS;AAoDf,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}