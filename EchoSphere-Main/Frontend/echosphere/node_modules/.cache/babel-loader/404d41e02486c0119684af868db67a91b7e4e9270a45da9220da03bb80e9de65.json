{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Route, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element: Element,\n  ...rest\n}) => {\n  _s();\n  const user_id = sessionStorage.getItem('user_id');\n  const worker_id = sessionStorage.getItem('worker_id');\n  const navigate = useNavigate();\n\n  // Determine the destination route based on user_id and worker_id.\n  let destinationRoute;\n  if (user_id) {\n    destinationRoute = '/dashboard';\n  } else if (worker_id) {\n    destinationRoute = '/worker';\n  } else {\n    destinationRoute = '/login';\n  }\n\n  // Redirect to the determined route if not already on that route.\n  if (window.location.pathname !== destinationRoute) {\n    navigate(destinationRoute, {\n      replace: true\n    });\n  }\n\n  // Render the protected component if user is authenticated.\n  if (user_id || worker_id) {\n    return /*#__PURE__*/_jsxDEV(Route, {\n      ...rest,\n      element: Element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  } else {\n    return null; // Return null to prevent rendering the component if not authenticated.\n  }\n};\n_s(PrivateRoute, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","useNavigate","jsxDEV","_jsxDEV","PrivateRoute","element","Element","rest","_s","user_id","sessionStorage","getItem","worker_id","navigate","destinationRoute","window","location","pathname","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Route, useNavigate } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ element: Element, ...rest }) => {\r\n  const user_id = sessionStorage.getItem('user_id');\r\n  const worker_id = sessionStorage.getItem('worker_id');\r\n  const navigate = useNavigate();\r\n\r\n  // Determine the destination route based on user_id and worker_id.\r\n  let destinationRoute;\r\n\r\n  if (user_id) {\r\n    destinationRoute = '/dashboard';\r\n  } else if (worker_id) {\r\n    destinationRoute = '/worker';\r\n  } else {\r\n    destinationRoute = '/login';\r\n  }\r\n\r\n  // Redirect to the determined route if not already on that route.\r\n  if (window.location.pathname !== destinationRoute) {\r\n    navigate(destinationRoute, { replace: true });\r\n  }\r\n\r\n  // Render the protected component if user is authenticated.\r\n  if (user_id || worker_id) {\r\n    return <Route {...rest} element={Element} />;\r\n  } else {\r\n    return null; // Return null to prevent rendering the component if not authenticated.\r\n  }\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO,EAAEC,OAAO;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAMC,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EACjD,MAAMC,SAAS,GAAGF,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;EACrD,MAAME,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIa,gBAAgB;EAEpB,IAAIL,OAAO,EAAE;IACXK,gBAAgB,GAAG,YAAY;EACjC,CAAC,MAAM,IAAIF,SAAS,EAAE;IACpBE,gBAAgB,GAAG,SAAS;EAC9B,CAAC,MAAM;IACLA,gBAAgB,GAAG,QAAQ;EAC7B;;EAEA;EACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAKH,gBAAgB,EAAE;IACjDD,QAAQ,CAACC,gBAAgB,EAAE;MAAEI,OAAO,EAAE;IAAK,CAAC,CAAC;EAC/C;;EAEA;EACA,IAAIT,OAAO,IAAIG,SAAS,EAAE;IACxB,oBAAOT,OAAA,CAACH,KAAK;MAAA,GAAKO,IAAI;MAAEF,OAAO,EAAEC;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC9C,CAAC,MAAM;IACL,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;AAACd,EAAA,CA3BIJ,YAAY;EAAA,QAGCH,WAAW;AAAA;AAAAsB,EAAA,GAHxBnB,YAAY;AA6BlB,eAAeA,YAAY;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}