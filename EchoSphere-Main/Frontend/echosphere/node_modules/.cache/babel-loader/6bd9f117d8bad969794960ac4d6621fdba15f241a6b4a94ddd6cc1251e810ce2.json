{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\GoogleTranslate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleTranslate = ({\n  lang\n}) => {\n  _s();\n  const googleTranslateRef = useRef(null);\n  useEffect(() => {\n    // Initialize Google Translate only once\n    if (!googleTranslateRef.current) {\n      function waitForElementToExist(selector) {\n        return new Promise(resolve => {\n          if (document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n          }\n          const observer = new MutationObserver(() => {\n            if (document.querySelector(selector)) {\n              resolve(document.querySelector(selector));\n              observer.disconnect();\n            }\n          });\n          observer.observe(document.body, {\n            subtree: true,\n            childList: true\n          });\n        });\n      }\n      function googleTranslateElementInit() {\n        window.google.translate.TranslateElement({\n          pageLanguage: 'en',\n          // Set the default language to English\n          includedLanguages: lang !== 'en' ? lang : ''\n        }, 'google_translate_element');\n        if (lang !== 'en') {\n          waitForElementToExist('#google_translate_element').then(element => {\n            setTimeout(() => {\n              var select = document.querySelector(\".goog-te-combo\");\n              select.value = lang;\n              select.dispatchEvent(new Event(\"change\")); // Trigger the change event\n            }, 1000);\n          });\n        }\n      }\n      window.googleTranslateElementInit = googleTranslateElementInit;\n      const script = document.createElement('script');\n      script.src = 'https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';\n      script.async = true;\n      document.head.appendChild(script);\n      googleTranslateRef.current = true;\n    } else {\n      // Update the language if the lang prop changes\n      if (window.google && window.google.translate && lang !== 'en') {\n        var select = document.querySelector(\".goog-te-combo\");\n        select.value = lang;\n        select.dispatchEvent(new Event(\"change\")); // Trigger the change event\n      }\n    }\n  }, [lang]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"google_translate_element\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(GoogleTranslate, \"GG0rXNp9msClz+2JStm7i73BGXQ=\");\n_c = GoogleTranslate;\nexport default GoogleTranslate;\nvar _c;\n$RefreshReg$(_c, \"GoogleTranslate\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","GoogleTranslate","lang","_s","googleTranslateRef","current","waitForElementToExist","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","observe","body","subtree","childList","googleTranslateElementInit","window","google","translate","TranslateElement","pageLanguage","includedLanguages","then","element","setTimeout","select","value","dispatchEvent","Event","script","createElement","src","async","head","appendChild","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/GoogleTranslate.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst GoogleTranslate = ({ lang }) => {\r\n  const googleTranslateRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize Google Translate only once\r\n    if (!googleTranslateRef.current) {\r\n      function waitForElementToExist(selector) {\r\n        return new Promise(resolve => {\r\n          if (document.querySelector(selector)) {\r\n            return resolve(document.querySelector(selector));\r\n          }\r\n\r\n          const observer = new MutationObserver(() => {\r\n            if (document.querySelector(selector)) {\r\n              resolve(document.querySelector(selector));\r\n              observer.disconnect();\r\n            }\r\n          });\r\n\r\n          observer.observe(document.body, {\r\n            subtree: true,\r\n            childList: true,\r\n          });\r\n        });\r\n      }\r\n\r\n      function googleTranslateElementInit() {\r\n        window.google.translate.TranslateElement(\r\n          {\r\n            pageLanguage: 'en', // Set the default language to English\r\n            includedLanguages: lang !== 'en' ? lang : '',\r\n          },\r\n          'google_translate_element'\r\n        );\r\n\r\n        if (lang !== 'en') {\r\n          waitForElementToExist('#google_translate_element').then(element => {\r\n            setTimeout(() => {\r\n              var select = document.querySelector(\".goog-te-combo\");\r\n              select.value = lang;\r\n              select.dispatchEvent(new Event(\"change\")); // Trigger the change event\r\n            }, 1000);\r\n          });\r\n        }\r\n      }\r\n\r\n      window.googleTranslateElementInit = googleTranslateElementInit;\r\n\r\n      const script = document.createElement('script');\r\n      script.src = 'https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';\r\n      script.async = true;\r\n      document.head.appendChild(script);\r\n\r\n      googleTranslateRef.current = true;\r\n    } else {\r\n      // Update the language if the lang prop changes\r\n      if (window.google && window.google.translate && lang !== 'en') {\r\n        var select = document.querySelector(\".goog-te-combo\");\r\n        select.value = lang;\r\n        select.dispatchEvent(new Event(\"change\")); // Trigger the change event\r\n      }\r\n    }\r\n  }, [lang]);\r\n\r\n  return <div id=\"google_translate_element\"></div>;\r\n};\r\n\r\nexport default GoogleTranslate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}