{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\GoogleTranslate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleTranslate = ({\n  lang\n}) => {\n  _s();\n  useEffect(() => {\n    function waitForElementToExist(selector) {\n      return new Promise(resolve => {\n        if (document.querySelector(selector)) {\n          return resolve(document.querySelector(selector));\n        }\n        const observer = new MutationObserver(() => {\n          if (document.querySelector(selector)) {\n            resolve(document.querySelector(selector));\n            observer.disconnect();\n          }\n        });\n        observer.observe(document.body, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n    function googleTranslateElementInit(lang) {\n      window.google.translate.TranslateElement({\n        pageLanguage: 'en',\n        includedLanguages: lang // Use the passed lang prop here\n      }, 'google_translate_element');\n      waitForElementToExist('#google_translate_element').then(element => {\n        setTimeout(() => {\n          var select = document.querySelector(\".goog-te-combo\");\n          select.value = lang;\n          select.dispatchEvent(new Event(\"change\")); // Trigger the change event\n        }, 1000);\n      });\n    }\n    window.onload = function () {\n      googleTranslateElementInit(lang);\n    };\n  }, [lang]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"google_translate_element\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n_s(GoogleTranslate, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GoogleTranslate;\nexport default GoogleTranslate;\nvar _c;\n$RefreshReg$(_c, \"GoogleTranslate\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","GoogleTranslate","lang","_s","waitForElementToExist","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","observe","body","subtree","childList","googleTranslateElementInit","window","google","translate","TranslateElement","pageLanguage","includedLanguages","then","element","setTimeout","select","value","dispatchEvent","Event","onload","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/GoogleTranslate.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst GoogleTranslate = ({ lang }) => {\r\n  useEffect(() => {\r\n    function waitForElementToExist(selector) {\r\n      return new Promise(resolve => {\r\n        if (document.querySelector(selector)) {\r\n          return resolve(document.querySelector(selector));\r\n        }\r\n\r\n        const observer = new MutationObserver(() => {\r\n          if (document.querySelector(selector)) {\r\n            resolve(document.querySelector(selector));\r\n            observer.disconnect();\r\n          }\r\n        });\r\n\r\n        observer.observe(document.body, {\r\n          subtree: true,\r\n          childList: true,\r\n        });\r\n      });\r\n    }\r\n\r\n    function googleTranslateElementInit(lang) {\r\n      window.google.translate.TranslateElement(\r\n        {\r\n          pageLanguage: 'en',\r\n          includedLanguages: lang, // Use the passed lang prop here\r\n        },\r\n        'google_translate_element'\r\n      );\r\n\r\n      waitForElementToExist('#google_translate_element').then(element => {\r\n        setTimeout(() => {\r\n          var select = document.querySelector(\".goog-te-combo\");\r\n          select.value = lang;\r\n          select.dispatchEvent(new Event(\"change\")); // Trigger the change event\r\n        }, 1000);\r\n      });\r\n    }\r\n\r\n    window.onload = function () {\r\n      googleTranslateElementInit(lang);\r\n    };\r\n  }, [lang]);\r\n\r\n  return <div id=\"google_translate_element\"></div>;\r\n};\r\n\r\nexport default GoogleTranslate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACpCL,SAAS,CAAC,MAAM;IACd,SAASM,qBAAqBA,CAACC,QAAQ,EAAE;MACvC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAC5B,IAAIC,QAAQ,CAACC,aAAa,CAACJ,QAAQ,CAAC,EAAE;UACpC,OAAOE,OAAO,CAACC,QAAQ,CAACC,aAAa,CAACJ,QAAQ,CAAC,CAAC;QAClD;QAEA,MAAMK,QAAQ,GAAG,IAAIC,gBAAgB,CAAC,MAAM;UAC1C,IAAIH,QAAQ,CAACC,aAAa,CAACJ,QAAQ,CAAC,EAAE;YACpCE,OAAO,CAACC,QAAQ,CAACC,aAAa,CAACJ,QAAQ,CAAC,CAAC;YACzCK,QAAQ,CAACE,UAAU,CAAC,CAAC;UACvB;QACF,CAAC,CAAC;QAEFF,QAAQ,CAACG,OAAO,CAACL,QAAQ,CAACM,IAAI,EAAE;UAC9BC,OAAO,EAAE,IAAI;UACbC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IAEA,SAASC,0BAA0BA,CAACf,IAAI,EAAE;MACxCgB,MAAM,CAACC,MAAM,CAACC,SAAS,CAACC,gBAAgB,CACtC;QACEC,YAAY,EAAE,IAAI;QAClBC,iBAAiB,EAAErB,IAAI,CAAE;MAC3B,CAAC,EACD,0BACF,CAAC;MAEDE,qBAAqB,CAAC,2BAA2B,CAAC,CAACoB,IAAI,CAACC,OAAO,IAAI;QACjEC,UAAU,CAAC,MAAM;UACf,IAAIC,MAAM,GAAGnB,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC;UACrDkB,MAAM,CAACC,KAAK,GAAG1B,IAAI;UACnByB,MAAM,CAACE,aAAa,CAAC,IAAIC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACJ;IAEAZ,MAAM,CAACa,MAAM,GAAG,YAAY;MAC1Bd,0BAA0B,CAACf,IAAI,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBAAOF,OAAA;IAAKgC,EAAE,EAAC;EAA0B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAClD,CAAC;AAACjC,EAAA,CA9CIF,eAAe;AAAAoC,EAAA,GAAfpC,eAAe;AAgDrB,eAAeA,eAAe;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}