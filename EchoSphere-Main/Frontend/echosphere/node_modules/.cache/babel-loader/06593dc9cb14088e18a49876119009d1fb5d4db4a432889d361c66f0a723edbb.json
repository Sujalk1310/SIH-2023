{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\EchoSphere-Main\\\\Frontend\\\\echosphere\\\\src\\\\Components\\\\PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\n\n// Check if the user is authenticated based on user_id and worker_id.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  const user_id = sessionStorage.getItem('user_id');\n  const worker_id = sessionStorage.getItem('worker_id');\n  return !!user_id || !!worker_id;\n};\nconst PrivateRoute = ({\n  element: Element,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  ...rest,\n  element: isAuthenticated() ?\n  // If user_id is present, navigate to the dashboard.\n  user_id ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/dashboard\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 11\n  }, this) :\n  // If worker_id is present, navigate to the worker component.\n  worker_id ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/worker\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 13\n  }, this) : null // Handle other cases as needed\n  :\n  /*#__PURE__*/\n  // If neither user_id nor worker_id is present, navigate to login.\n  _jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Navigate","jsxDEV","_jsxDEV","isAuthenticated","user_id","sessionStorage","getItem","worker_id","PrivateRoute","element","Element","rest","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project/EchoSphere-Main/Frontend/echosphere/src/Components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Route, Navigate } from 'react-router-dom';\r\n\r\n// Check if the user is authenticated based on user_id and worker_id.\r\nconst isAuthenticated = () => {\r\n  const user_id = sessionStorage.getItem('user_id');\r\n  const worker_id = sessionStorage.getItem('worker_id');\r\n  return !!user_id || !!worker_id;\r\n};\r\n\r\nconst PrivateRoute = ({ element: Element, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    element={\r\n      isAuthenticated() ? (\r\n        // If user_id is present, navigate to the dashboard.\r\n        user_id ? (\r\n          <Navigate to=\"/dashboard\" replace />\r\n        ) : (\r\n          // If worker_id is present, navigate to the worker component.\r\n          worker_id ? (\r\n            <Navigate to=\"/worker\" replace />\r\n          ) : null // Handle other cases as needed\r\n        )\r\n      ) : (\r\n        // If neither user_id nor worker_id is present, navigate to login.\r\n        <Navigate to=\"/login\" replace />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EACjD,MAAMC,SAAS,GAAGF,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC;EACrD,OAAO,CAAC,CAACF,OAAO,IAAI,CAAC,CAACG,SAAS;AACjC,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO,EAAEC,OAAO;EAAE,GAAGC;AAAK,CAAC,kBACjDT,OAAA,CAACH,KAAK;EAAA,GACAY,IAAI;EACRF,OAAO,EACLN,eAAe,CAAC,CAAC;EACf;EACAC,OAAO,gBACLF,OAAA,CAACF,QAAQ;IAACY,EAAE,EAAC,YAAY;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEpC;EACAV,SAAS,gBACPL,OAAA,CAACF,QAAQ;IAACY,EAAE,EAAC,SAAS;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,GAC/B,IAAI,CAAC;EACV;EAAA;EAED;EACAf,OAAA,CAACF,QAAQ;IAACY,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAElC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACF,CACF;AAACC,EAAA,GApBIV,YAAY;AAsBlB,eAAeA,YAAY;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}